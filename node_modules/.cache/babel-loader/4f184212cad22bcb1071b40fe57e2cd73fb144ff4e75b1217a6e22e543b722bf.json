{"ast":null,"code":"var _jsxFileName = \"/Users/andreisorin/Desktop/Projects/Exam-practice-app/src/components/QuestionType/QuestionDetails/QuestionDetails.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport data from \"../../../db/db.json\";\nimport styles from \"./QuestionDetails.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuestionDetails() {\n  _s();\n  const [checked, setChecked] = useState({});\n  const {\n    year,\n    type\n  } = useParams();\n  const filteredYear = data.find(yearData => yearData.year === year);\n  const filteredType = filteredYear ? filteredYear.data.find(typeData => typeData.type === type) : null;\n  const questions = filteredType ? filteredType.data : [];\n  const handleChange = (questionId, answerKey) => {\n    setChecked(prevState => ({\n      ...prevState,\n      [questionId]: answerKey\n    }));\n  };\n  const checkAnswer = question => {\n    const selectedAnswer = checked[question.id];\n    return selectedAnswer === question.correctAnswer;\n  };\n  const getClassName = question => {\n    if (!checked[question.id]) return \"\";\n    return checkAnswer(question) ? styles.correct : styles.wrong;\n  };\n  return /*#__PURE__*/_jsxDEV(\"ol\", {\n    children: questions.map(question => {\n      const answers = question.answers;\n      const objectKeys = Object.keys(answers);\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: question.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          type: \"A\",\n          className: styles.answersList,\n          children: objectKeys.map((objectKey, key) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: styles.answersListItem,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                checked: checked[question.id] === key,\n                type: \"checkbox\",\n                onChange: () => handleChange(question.id, key)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: getClassName(question),\n                children: [checkAnswer(question) ? \"Răspuns corect!\" : \"Răspuns greșit!\", answers[objectKey]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 19\n            }, this)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionDetails, \"EI3LJN8JEMFjvcLiO811y0V7EK0=\", false, function () {\n  return [useParams];\n});\n_c = QuestionDetails;\nvar _c;\n$RefreshReg$(_c, \"QuestionDetails\");","map":{"version":3,"names":["React","useState","useParams","data","styles","jsxDEV","_jsxDEV","QuestionDetails","_s","checked","setChecked","year","type","filteredYear","find","yearData","filteredType","typeData","questions","handleChange","questionId","answerKey","prevState","checkAnswer","question","selectedAnswer","id","correctAnswer","getClassName","correct","wrong","children","map","answers","objectKeys","Object","keys","fileName","_jsxFileName","lineNumber","columnNumber","className","answersList","objectKey","key","answersListItem","onChange","_c","$RefreshReg$"],"sources":["/Users/andreisorin/Desktop/Projects/Exam-practice-app/src/components/QuestionType/QuestionDetails/QuestionDetails.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport data from \"../../../db/db.json\";\nimport styles from \"./QuestionDetails.module.css\";\n\nexport default function QuestionDetails() {\n  const [checked, setChecked] = useState({});\n  const { year, type } = useParams();\n  const filteredYear = data.find((yearData) => yearData.year === year);\n  const filteredType = filteredYear\n    ? filteredYear.data.find((typeData) => typeData.type === type)\n    : null;\n  const questions = filteredType ? filteredType.data : [];\n\n  const handleChange = (questionId, answerKey) => {\n    setChecked((prevState) => ({ ...prevState, [questionId]: answerKey }));\n  };\n\n  const checkAnswer = (question) => {\n    const selectedAnswer = checked[question.id];\n    return selectedAnswer === question.correctAnswer;\n  };\n  const getClassName = (question) => {\n    if (!checked[question.id]) return \"\";\n    return checkAnswer(question) ? styles.correct : styles.wrong;\n  };\n\n  return (\n    <ol>\n      {questions.map((question) => {\n        const answers = question.answers;\n        const objectKeys = Object.keys(answers);\n        return (\n          <li key={question.id}>\n            <h3>{question.question}</h3>\n            <ol type=\"A\" className={styles.answersList}>\n              {objectKeys.map((objectKey, key) => (\n                <li key={key}>\n                  <label className={styles.answersListItem}>\n                    <input\n                      checked={checked[question.id] === key}\n                      type=\"checkbox\"\n                      onChange={() => handleChange(question.id, key)}\n                    />\n                    <p className={getClassName(question)}>\n                      {checkAnswer(question)\n                        ? \"Răspuns corect!\"\n                        : \"Răspuns greșit!\"}\n                      {/* {checked[question.id] &&\n                        (checkAnswer(question) ? (\n                          <span style={{ color: \"green\" }}>\n                            Răspuns corect!\n                          </span>\n                        ) : (\n                          <span style={{ color: \"red\" }}>Răspuns greșit!</span>\n                        ))} */}\n                      {answers[objectKey]}\n                    </p>\n                  </label>\n                </li>\n              ))}\n            </ol>\n          </li>\n        );\n      })}\n    </ol>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}